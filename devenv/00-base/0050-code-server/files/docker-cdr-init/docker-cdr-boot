#!/bin/bash
set -o errexit

echo "*** Development environment with code-server ***"

# backup previous version's extensions
if [ -d "/data/home/.local/share/code-server/extensions/" ]; then
	if [ ! -d "/data/home/.local/share/code-server/extensions.BF${CODE_SERVER_VER}/" ]; then
		echo "... Backup previous version's extensions INTO '/data/home/.local/share/code-server/extensions.BF${CODE_SERVER_VER}/' ..."
		mv "/data/home/.local/share/code-server/extensions/" "/data/home/.local/share/code-server/extensions.BF${CODE_SERVER_VER}/"
	fi
else
	# Yes, we should build a mark to avoid recreate extensions.BF* when second running on same local volume
	mkdir -p "/data/home/.local/share/code-server/extensions.BF${CODE_SERVER_VER}/"
fi

# extensions initialization - child image should install or copy extensions here
if [ ! -d "/data/home/.local/share/code-server/extensions/" ]; then
	# ONLY a BLANK ~/.config/code-server need extensions initialization
	mkdir -p "/data/home/.local/share/code-server/extensions"
	
	# Install pre-installed extensions
    /docker-cdr-init/docker-cdr-install-extensions.sh
    
    echo "... First boot - setting up ownership for u01 :'/data/home/.local/' ..."
    echo ".... --------"
	chown -Rv u01:u01 /data/home/.local/ | (sed -u 7q; echo "..."; tail -n 7)
    echo ".... --------"
fi

echo "... Extensions installed at '/data/home/.local/share/code-server/extensions':"
echo ".... --------"
ls -al "/data/home/.local/share/code-server/extensions/"
echo ".... --------"

###############################################################################
##                       Prepare code-server config                          ##
###############################################################################
mkdir -p /data/home/.config/code-server
echo "# created by $* at $(date)" > /data/home/.config/code-server/config.yaml

#Prepare password in ~/.config/code-server/config.yaml
if [ "${CDR_PASSWORD}" != "BLANK" ]; then
    echo "password: \"$CDR_PASSWORD\""    >> /data/home/.config/code-server/config.yaml
fi

#Prepare cert - for command argument:
#    --cert /data/home/.config/code-server/cert/local.code-server.crt
#    --cert-key=/data/home/.config/code-server/cert/local.code-server.key
mkdir -p /data/home/.config/code-server/cert
cd /data/home/.config/code-server/cert

openssl genrsa -out ca.key 4096
openssl req -x509 -new -nodes -sha512 -days 3650 -subj "/C=CN/ST=local-st/L=local-l/O=local-o/OU=local-ou/CN=local.code-server" -key ca.key -out ca.crt
openssl genrsa -out local.code-server.key 4096
openssl req -sha512 -new -subj "/C=CN/ST=local-st/L=local-l/O=local-o/OU=local-ou/CN=local.code-server" -key local.code-server.key -out local.code-server.csr

cat > v3.ext <<-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = IP:127.0.0.1
EOF

openssl x509 -req -sha512 -days 3650 -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -in local.code-server.csr -out local.code-server.crt
#openssl x509 -inform PEM -in local.code-server.crt -out local.code-server.cert
#update-ca-trust
echo "cert: /data/home/.config/code-server/cert/local.code-server.crt"     >> /data/home/.config/code-server/config.yaml
echo "cert-key: /data/home/.config/code-server/cert/local.code-server.key" >> /data/home/.config/code-server/config.yaml

# Final
chown -Rv u01:u01 /data/home/.config/code-server
###############################################################################
